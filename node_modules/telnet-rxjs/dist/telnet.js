"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var command_1 = require("./command");
var connection_1 = require("./connection");
var event_1 = require("./event");
var protocol_1 = require("./protocol");
var server_1 = require("./server");
__export(require("./command"));
__export(require("./connection"));
__export(require("./event"));
__export(require("./protocol"));
__export(require("./server"));
/**
 * A factory method for creating a telnet connection to a remote server.  TLS servers are supported
 * by using a protocol of telnets:
 *
 * @param {string} hostUrl the url of the host to connect to
 * @param {*} [options={}] additional options to be passed to the net/tls connect call
 * @returns {Connection} the client connection
 */
function createClient(hostUrl, options) {
    if (options === void 0) { options = {}; }
    var client;
    if (!hostUrl) {
        throw new Error('No host URL given');
    }
    if (!options.clientClass) {
        options.clientClass = connection_1.Connection;
    }
    var parts = hostUrl.split(':');
    if (parts.length === 2) {
        hostUrl = protocol_1.Protocol.build(protocol_1.Protocol.TELNET, parts[0], parts[1]);
    }
    var parsedUrl = url.parse(hostUrl);
    if (parsedUrl.protocol !== 'telnet:' && parsedUrl.protocol !== 'telnets:') {
        throw new Error("Invalid protocol: " + parsedUrl.protocol);
    }
    if (parsedUrl.port === null || parsedUrl.port === undefined) {
        throw new Error('No host port given');
    }
    client = new options.clientClass(__assign({ remoteUrl: parsedUrl }, options));
    return client;
}
exports.createClient = createClient;
/**
 * A factory method for creating a server.  TLS servers are supported by using a protocol
 * of telnets:  At a minimum, the port must be supplied.
 *
 * @param {(string | number)} hostUrl the url of the server that is being created
 * @param {*} [options={}] additional options to be passed to the net/tls createServer call
 * @returns {Server} the server object
 */
function createServer(hostUrl, options) {
    if (options === void 0) { options = {}; }
    var server;
    if (!hostUrl) {
        throw new Error('No host URL given');
    }
    if (typeof hostUrl === 'number') {
        hostUrl = protocol_1.Protocol.build(protocol_1.Protocol.TELNET, '0.0.0.0', hostUrl);
    }
    else {
        var parts = hostUrl.split(':');
        if (parts.length === 1) {
            hostUrl = protocol_1.Protocol.build(protocol_1.Protocol.TELNET, '0.0.0.0', parts[0]);
        }
        else if (parts.length === 2) {
            hostUrl = protocol_1.Protocol.build(protocol_1.Protocol.TELNET, parts[0], parts[1]);
        }
    }
    var parsedUrl = url.parse(hostUrl);
    if (parsedUrl.protocol !== 'telnet:' && parsedUrl.protocol !== 'telnets:') {
        throw new Error("Invalid protocol: " + parsedUrl.protocol);
    }
    if (parsedUrl.port === null || parsedUrl.port === undefined) {
        throw new Error('No host port given');
    }
    if (!options.serverClass) {
        options.serverClass = server_1.Server;
    }
    if (!options.clientClass) {
        options.clientClass = connection_1.Connection;
    }
    server = new options.serverClass(__assign({ hostUrl: parsedUrl }, options));
    return server;
}
exports.createServer = createServer;
var Telnet = /** @class */ (function () {
    function Telnet() {
    }
    Telnet.Command = command_1.Command;
    Telnet.Connection = connection_1.Connection;
    Telnet.Event = event_1.Event;
    Telnet.Protocol = protocol_1.Protocol;
    Telnet.Server = server_1.Server;
    Telnet.client = createClient;
    Telnet.server = createServer;
    return Telnet;
}());
exports.Telnet = Telnet;
//# sourceMappingURL=telnet.js.map