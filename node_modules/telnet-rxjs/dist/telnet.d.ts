import { Command } from './command';
import { Connection } from './connection';
import { Event } from './event';
import { Protocol } from './protocol';
import { Server } from './server';
export * from './command';
export * from './connection';
export * from './event';
export * from './protocol';
export * from './server';
/**
 * A factory method for creating a telnet connection to a remote server.  TLS servers are supported
 * by using a protocol of telnets:
 *
 * @param {string} hostUrl the url of the host to connect to
 * @param {*} [options={}] additional options to be passed to the net/tls connect call
 * @returns {Connection} the client connection
 */
export declare function createClient(hostUrl: string, options?: any): Connection;
/**
 * A factory method for creating a server.  TLS servers are supported by using a protocol
 * of telnets:  At a minimum, the port must be supplied.
 *
 * @param {(string | number)} hostUrl the url of the server that is being created
 * @param {*} [options={}] additional options to be passed to the net/tls createServer call
 * @returns {Server} the server object
 */
export declare function createServer(hostUrl: string | number, options?: any): Server;
export declare class Telnet {
    static Command: typeof Command;
    static Connection: typeof Connection;
    static Event: typeof Event;
    static Protocol: typeof Protocol;
    static Server: typeof Server;
    static client: typeof createClient;
    static server: typeof createServer;
}
